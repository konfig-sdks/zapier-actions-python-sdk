# coding: utf-8

"""
    Zapier AI Actions API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zapier_actions_python_sdk import schemas  # noqa: F401


class ExecuteRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    This extends from ExecuteRequestBase to add the preview_only option.

(1) Providers who allow side effects or (2) actions that do not have a side effect should use this class.
    """


    class MetaOapg:
        required = {
            "instructions",
        }
        
        class properties:
            instructions = schemas.StrSchema
            preview_only = schemas.BoolSchema
            __annotations__ = {
                "instructions": instructions,
                "preview_only": preview_only,
            }
    
    instructions: MetaOapg.properties.instructions
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instructions"]) -> MetaOapg.properties.instructions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preview_only"]) -> MetaOapg.properties.preview_only: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["instructions", "preview_only", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instructions"]) -> MetaOapg.properties.instructions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preview_only"]) -> typing.Union[MetaOapg.properties.preview_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["instructions", "preview_only", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        instructions: typing.Union[MetaOapg.properties.instructions, str, ],
        preview_only: typing.Union[MetaOapg.properties.preview_only, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExecuteRequest':
        return super().__new__(
            cls,
            *args,
            instructions=instructions,
            preview_only=preview_only,
            _configuration=_configuration,
            **kwargs,
        )
